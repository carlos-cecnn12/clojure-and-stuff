<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="2144b959-47e5-436c-b04f-4b24a7a80d36" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/1. Introduction/problemset2.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/1. Introduction/problemset2.clj" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectId" id="1PiDodkahlNeWjPh2QITOZ590Bx" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="PropertiesComponent">
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="cursive.last.file.extension./Users/carlos-cecnn12/untitled/src" value="clj" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="settings.editor.selected.configurable" value="project.propVCSSupport.Mappings" />
  </component>
  <component name="ReplState" timestamp="1568944604381">{:repl-history {:ide [], :local [{:command &quot;(+ 1 2 3)&quot;, :offset 9, :ns &quot;user&quot;} {:command &quot;(f2c 100)&quot;, :offset 9, :ns &quot;user&quot;} {:command &quot;(roots [2 4 2])&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(roots 2 4 2)&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;  (roots 1 0 0)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;  (roots 4 5 1)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(bmi 80 2)&quot;, :offset 10, :ns &quot;user&quot;} {:command &quot;(bmi 100 1.85)&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(bmi 110 1.85)&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(boolean -1)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(! 3)&quot;, :offset 5, :ns &quot;user&quot;} {:command &quot;(! 0)&quot;, :offset 5, :ns &quot;user&quot;} {:command &quot;(! 10)&quot;, :offset 6, :ns &quot;user&quot;} {:command &quot;(! 100)\n   &quot;, :offset 10, :ns &quot;user&quot;} {:command &quot;(! 100N)\n   &quot;, :offset 8, :ns &quot;user&quot;} {:command &quot;(zero? 0.3)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(doc reduce)&quot;, :offset 12, :ns &quot;user&quot;} {:command &quot;(duplicate (1 2 3))&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(duplicat e '(1 2 3))&quot;, :offset 21} {:command &quot;(duplicate '(1 2 3))&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(pow 2 1)\n     &quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(pow 2 2)&quot;, :offset 9, :ns &quot;user&quot;} {:command &quot;(pow 2 0)&quot;, :offset 9, :ns &quot;user&quot;} {:command &quot;(pow 4\n     0)&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(swapper 'kitty 'purr '(Soft kitty\n                             Warm kitty\n                             Little ball of fur\n\n                             Happy kitty\n                             Sleepy kitty\n                             Purr purr purr))&quot;, :offset 252, :ns &quot;user&quot;} {:command &quot;(swapper 'kitty 'purr '(soft kitty warm kitty purr purr purr))&quot;, :offset 62, :ns &quot;user&quot;} {:command &quot;(replic 3 '(a))&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(replic 4 '(1 2 3 4))&quot;, :offset 21, :ns &quot;user&quot;} {:command &quot;(expand '(1 2 3 4))&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(expand '(a b c d e))&quot;, :offset 21, :ns &quot;user&quot;} {:command &quot;(rotate-left 0 '(a b c d e f g))&quot;, :offset 32, :ns &quot;user&quot;} {:command &quot;(my-sort '(2 3 1 4))&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(my-sort (2 3 1 4))&quot;, :offset 19, :ns &quot;user&quot;} {:command &quot;(rotate-left 2 '(a b c d e f g))&quot;, :offset 32, :ns &quot;user&quot;} {:command &quot;(split-at 3 '(a b c d e f g))&quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(first (split-at 3 '(a b c d e f g)))&quot;, :offset 37, :ns &quot;user&quot;} {:command &quot;(l)&quot;, :offset 3} {:command &quot;(list*\n  (rest (split-at 3 '(a b c d e f g))))&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(map\n  (rest (split-at 3 '(a b c d e f g))))&quot;, :offset 44, :ns &quot;user&quot;} {:command &quot;(map list\n  (rest (split-at 3 '(a b c d e f g))))&quot;, :offset 49, :ns &quot;user&quot;} {:command &quot;(map list*\n  (rest (s plit-at 3 '(a b c d e f g))))&quot;, :offset 51, :ns &quot;user&quot;} {:command &quot;(map list*\n  (rest (split-at 3 '(a b c d e f g))))&quot;, :offset 50, :ns &quot;user&quot;} {:command &quot;(seq\n  (rest (split-at 3 '(a b c d e f g))))&quot;, :offset 44, :ns &quot;user&quot;} {:command &quot;(rest (split-at 3 '(a b c d e f g)))&quot;, :offset 36, :ns &quot;user&quot;} {:command &quot;(first (rest (split-at 3 '(a b c d e f g))))&quot;, :offset 44, :ns &quot;user&quot;} {:command &quot;(rotate-left -3 '(a b c d e f g))&quot;, :offset 33, :ns &quot;user&quot;} {:command &quot;(rotate-left 8 '(a b c d e f g))&quot;, :offset 32, :ns &quot;user&quot;} {:command &quot;(split-at -3 '(a b c d e f g))&quot;, :offset 30, :ns &quot;user&quot;} {:command &quot;(rotate-left 1 '(a b c d e f g))&quot;, :offset 32, :ns &quot;user&quot;} {:command &quot;(rotate-left -8 '(a b c d e f g))&quot;, :offset 33, :ns &quot;user&quot;} {:command &quot;(decode '([9 9]))&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(decode '([4 a] b [2 c] [2 a] d [4 e]))&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;(buffoon? '(1000 1000 1000))&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(buffoon? '(6 6 6 6 6 6 6 6 6 6\n             6 6 6 6 6 6 6 6 6 6\n             6 6 6 6 6 6 6 6 6 6\n             6 6 6 6 6 6 6 6 6 6\n             6 9 6 6 6 6 6 6 6 6\n             6 6 6 6 6 6 6 6 6 6))&quot;, :offset 198, :ns &quot;user&quot;} {:command &quot;(buffoon? (42 8 23 4 16 15))&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(buffoon? '(42 8 23 4 16 15))&quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(buffoon? '(5 4))&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(buffoon? '(1 2 3 4 5))&quot;, :offset 23, :ns &quot;user&quot;} {:command &quot;(first (partition-by identity (map #(if (&gt;= x %)\n                                      true\n                                      false) '(1 2 3 4 5))))&quot;, :offset 152, :ns &quot;user&quot;} {:command &quot;(first (partition-by identity (map #(if (&gt;= (first '(1 2 3 4 5)) %)\n                                      true\n                                      false) '(1 2 3 4 5))))&quot;, :offset 171, :ns &quot;user&quot;} {:command &quot;(partition-by identity (map #(if (&gt;= (first '(1 2 3 4 5)) %)\n                               true\n                               false) '(1 2 3 4 5)))&quot;, :offset 149, :ns &quot;user&quot;} {:command &quot;(partition-by identity (map #(if (&gt;= (first '(1 2 3 4 5)) %)\n                               true\n                               false) '(2 3 4 5)))&quot;, :offset 147, :ns &quot;user&quot;} {:command &quot;(reduce identity (partition-by identity (map #(if (&gt;= (first '(1 2 3 4 5)) %)\n                                                true\n                                                false) '(2 3 4 5))))&quot;, :offset 199, :ns &quot;user&quot;} {:command &quot;(reduce = (partition-by identity (map #(if (&gt;= (first '(1 2 3 4 5)) %)\n                                         true\n                                         false) '(2 3 4 5))))&quot;, :offset 178, :ns &quot;user&quot;} {:command &quot;(first (reduce = (partition-by identity (map #(if (&gt;= (first '(1 2 3 4 5)) %)\n                                                true\n                                                false) '(2 3 4 5)))))&quot;, :offset 200, :ns &quot;user&quot;} {:command &quot;(require '[clojure.math.numeric-tower :refer [round]])&quot;, :offset 54, :ns &quot;user&quot;} {:command &quot;(round '(8.5))&quot;, :offset 14, :ns &quot;user&quot;} {:command &quot;(round (8.5))&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(round 8.5)&quot;, :offset 11, :ns &quot;user&quot;} {:command &quot;(run-percentage 3 17)&quot;, :offset 21, :ns &quot;user&quot;} {:command &quot;(run-percentage 1 1)&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(range 10 90 10)&quot;, :offset 16, :ns &quot;user&quot;} {:command &quot;(range .1 1 .1)&quot;, :offset 15, :ns &quot;user&quot;} {:command &quot;(run-percentage 10 10)&quot;, :offset 22, :ns &quot;user&quot;} {:command &quot;(run-percentage 10000 10000)&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(run-percentage 9992 1)&quot;, :offset 23, :ns &quot;user&quot;} {:command &quot;(run-percentage 3 11)\n                &quot;, :offset 37, :ns &quot;user&quot;} {:command &quot;(run-percentage 3 17)\n                &quot;, :offset 38, :ns &quot;user&quot;} {:command &quot;(run-percentage 5 17)\n                &quot;, :offset 38, :ns &quot;user&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REPLay" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="Clodure" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="2144b959-47e5-436c-b04f-4b24a7a80d36" name="Default Changelist" comment="" />
      <created>1566348199714</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1566348199714</updated>
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="COLUMN_ORDER" />
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>